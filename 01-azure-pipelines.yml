# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: DevDeploy
    jobs:
      - job: Job1
        steps:
          - script: echo Dev Deploy!
            displayName: "Run a one-line script"
          - bash: echo $(pipeLineLevelVariable)
          - bash: echo $(Build.BuildNumber)
          - bash: echo $(Build.BuildId)
          - bash: echo $(Build.SourceBranchName)
          - bash: echo $(Build.SourcesDirectory)
          - bash: echo $(System.DefaultWorkingDirectory)
          - bash: ls -R $(System.DefaultWorkingDirectory)
          - bash: echo $(Build.ArtifactStagingDirectory)

          - script: |
              echo Add other tasks to build, test, and deploy your project.
              echo See https://aka.ms/yaml
            displayName: "Run a multi-line script"

          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              Contents: |
                **/*.yaml
                **/*.yml
                **/*.tf
              TargetFolder: "$(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"

          - bash: ls -R $(Build.ArtifactStagingDirectory)
            displayName: "Listing files in Build"

      - job: Job2
        dependsOn: Job3
        steps:
          - script: echo Job2 from Dev Deploy -------------------------!
            displayName: "Run a one-line script"

      - job: Job3
        dependsOn:
          - Job1
          - Job4
        steps:
          - script: echo Job3 from Dev Deploy -------!
            displayName: "Run a one-line script"

      - job: Job4
        steps:
          - script: echo Job3 from Dev Deploy -------!
            displayName: "Run a one-line script"

  - stage: QADeploy
    variables:
      variableOne: This is QA variable one
    dependsOn: DevDeploy
    jobs:
      - job: Job1
        steps:
          - script: echo QA Deploy Job1!
            displayName: "Run a one-line script QA Deploy"
          - bash: echo $(variableOne) test

      - job: Job2
        dependsOn: Job1
        steps:
          - script: echo Job2 from QA Deploy-------------------------!
            displayName: "Run a one-line script"

  - stage: ProdDeploy
    dependsOn: DevDeploy
    jobs:
      - job: Job1
        steps:
          - script: echo Production Deploy Job1!
            displayName: "Run a one-line script Prod Deploy"
